using System.Collections.Concurrent;

var line = File.ReadAllText(@"../../../../../2024/Exo11/input.txt");

Console.WriteLine(PartOne(line));
Console.WriteLine(PartTwo(line));

long PartOne (string line) => StoneCount(line, 25);
long PartTwo (string line) => StoneCount(line, 75);
long StoneCount(string input, int blinks) {
    var cache = new ConcurrentDictionary<(string, int), long>();
    return input.Split(" ").Sum(n => Eval(long.Parse(n), blinks, cache));
}

// Recursively calculates the total number of stones generated by a single engravement (n)
// after a specified number of blinks. Uses caching to optimize and prevent exponential
// computation by storing intermediate results.
long Eval(long n, int blinks, ConcurrentDictionary<(string, int), long> cache) =>
    cache.GetOrAdd((n.ToString(), blinks), key => 
        key switch {
            (_, 0)   => 1,

            ("0", _) => 
                Eval(1, blinks - 1, cache),
                
            (var st, _) when st.Length % 2 == 0 =>
                Eval(long.Parse(st[0..(st.Length / 2)]), blinks - 1, cache) +
                Eval(long.Parse(st[(st.Length / 2)..]),  blinks - 1, cache),

            _ =>  
                Eval(2024 * n, blinks - 1, cache)   
        }
    );